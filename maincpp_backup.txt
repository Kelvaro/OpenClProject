#define CL_USE_DEPRECATED_OPENCL_2_0_APIS

//#include <CL/cl.h>
#include <CL/cl.hpp>
#include <fstream>
#include <iostream>



cl::Program CreateProgram(const std::string& file);

int main()
{

	cl::Program program = CreateProgram("HelloWsorld.cl");

	auto context = program.getInfo<CL_PROGRAM_CONTEXT>();
	auto devices = context.getInfo<CL_CONTEXT_DEVICES>();
	auto device = devices.front();
	int err = 0;

	char buf[16];
	cl::Buffer memBuf(context, CL_MEM_WRITE_ONLY | CL_MEM_HOST_READ_ONLY, sizeof(buf));

	cl::Kernel kernel(program, "HelloWorld", &err);
	kernel.setArg(0, memBuf); //index of the kernel? memBuf = same as global memory.

	cl::CommandQueue queue(context, device);
	queue.enqueueTask(kernel);
	queue.enqueueReadBuffer(memBuf, CL_TRUE, 0, sizeof(buf), buf); //membu f= global mem buffer that's just filled in. read from global memory on device into memory on our side

	std::cout << buf;


	//printf("fin\n");
	system("pause");
	return 0;
}


cl::Program CreateProgram(const std::string& file) {

	std::vector<cl::Platform> platforms;
	cl::Platform::get(&platforms);

	auto platform = platforms.front();
	std::vector<cl::Device> devices;
	platform.getDevices(CL_DEVICE_TYPE_ALL, &devices);
	auto device = devices.front();

	std::ifstream infile(file);
	std::string src(std::istreambuf_iterator<char>(infile), (std::istreambuf_iterator<char>()));

	cl::Program::Sources sources(1, std::make_pair(src.c_str(), src.length() + 1)); //vector
	cl::Context context(device); //physical devices
	cl::Program program(context, sources);

	auto err = program.build("-cl-std=CL1.2"); //target opencl 1.2


	return program;
}


/*
	for (size_t i = 0;i < platforms.size();i++) {

		std::vector<cl::Device> devices;
		platforms[i].getDevices(CL_DEVICE_TYPE_ALL, &devices);
		_ASSERT(devices.size() > 0);



		for (size_t n = 0;n < devices.size();n++) {
			auto vendor =  devices[n].getInfo<CL_DEVICE_VENDOR>();
			auto version = devices[n].getInfo<CL_DEVICE_VERSION>();

			std::cout << "Vendor: " << vendor << "\tVersion: " << version<< std::endl;
		}

	}


		vector<int> data(100000000);

	for (int i = 0;i < 100000000;++i) {
		data[i] *= 2;
		if(i%1000000==0)
		printf("%d\n",i);
	}



//find out which gpus have biggest memory size?
	for (size_t i = 0;i < platforms.size();i++) {

		std::vector<cl::Device> devices;
		platforms[i].getDevices(CL_DEVICE_TYPE_GPU, &devices);
		_ASSERT(devices.size() > 0);

		for (size_t n = 0;n < devices.size();n++) {
			auto vendor = devices[n].getInfo<CL_DEVICE_VENDOR>();
			auto version = devices[n].getInfo<CL_DEVICE_VERSION>();
			auto max = devices[n].getInfo<CL_DEVICE_GLOBAL_MEM_SIZE>(); //CL_DEVICE_MAX_WORK_GROUP_SIZE

			std::cout << "Vendor: " << vendor << "\tVersion: " << version << "\tMax: " << max << std::endl;
		}

	}

	*/